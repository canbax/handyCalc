import { CalcBtn } from './CalcBtn';

export const STD_KEYBOARD: CalcBtn[] = [
  { txt: 'sin', fn: (s) => { return s + 'sin(' }, ids: ['sin'] },
  { txt: 'cos', fn: (s) => { return s + 'cos(' }, ids: ['cos'] },
  { txt: 'tan', fn: (s) => { return s + 'tan(' }, ids: ['tan'] },
  { txt: 'x<sup>n</sup>', fn: (s) => { return s + '^' }, ids: ['Dead'] },
  { txt: '&#8730;x', fn: (s) => { return s + '^(0.5)' }, ids: ['square root'] },
  { txt: '7', fn: (s) => { return s + '7' }, ids: ['7'] },
  { txt: '8', fn: (s) => { return s + '8' }, ids: ['8'] },
  { txt: '9', fn: (s) => { return s + '9' }, ids: ['9'] },
  { txt: 'DEL', fn: (s) => { return s.substring(0, s.length - 1) }, ids: ['Delete', 'Backspace'] },
  { txt: 'C', fn: (s) => { return '' }, ids: ['='] },
  { txt: '4', fn: (s) => { return s + '4' }, ids: ['4'] },
  { txt: '5', fn: (s) => { return s + '5' }, ids: ['5'] },
  { txt: '6', fn: (s) => { return s + '6' }, ids: ['6'] },
  { txt: 'x', fn: (s) => { return s + '*' }, ids: ['x'] },
  { txt: '÷', fn: (s) => { return s + '÷' }, ids: ['/'] },
  { txt: '1', fn: (s) => { return s + '1' }, ids: ['1'] },
  { txt: '2', fn: (s) => { return s + '2' }, ids: ['2'] },
  { txt: '3', fn: (s) => { return s + '3' }, ids: ['3'] },
  { txt: '+', fn: (s) => { return s + '+' }, ids: ['+'] },
  { txt: '-', fn: (s) => { return s + '-' }, ids: ['-'] },
  { txt: '0', fn: (s) => { return s + '0' }, ids: ['0'] },
  { txt: '.', fn: (s) => { return s + '.' }, ids: ['.'] },
  { txt: '(', fn: (s) => { return s + '(' }, ids: ['('] },
  { txt: ')', fn: (s) => { return s + ')' }, ids: [')'] },
  { txt: '%', fn: (s) => { return s + '%' }, ids: ['%'] }
];

export const EXTENDED_KEYBOARD: CalcBtn[] = [
  { txt: 'sin', fn: (s) => { return s + 'sin(' }, ids: ['sin'] },
  { txt: 'cos', fn: (s) => { return s + 'cos(' }, ids: ['cos'] },
  { txt: 'tan', fn: (s) => { return s + 'tan(' }, ids: ['tan'] },
  { txt: 'asin', fn: (s) => { return s + 'asin(' }, ids: ['asin'] },
  { txt: 'acos', fn: (s) => { return s + 'acos(' }, ids: ['acos'] },
  { txt: 'atan', fn: (s) => { return s + 'atan(' }, ids: ['atan'] },

  { txt: 'sinh', fn: (s) => { return s + 'sinh(' }, ids: ['sinh'] },
  { txt: 'cosh', fn: (s) => { return s + 'cosh(' }, ids: ['cosh'] },
  { txt: 'tanh', fn: (s) => { return s + 'tanh(' }, ids: ['tanh'] },
  { txt: 'log', fn: (s) => { return s + 'log(' }, ids: ['log'] },
  { txt: 'log2', fn: (s) => { return s + 'log2(' }, ids: ['log2'] },
  { txt: 'log10', fn: (s) => { return s + 'log10(' }, ids: ['log10'] },

  { txt: 'DEL', fn: (s) => { return s.substring(0, s.length - 1) }, ids: ['Delete', 'Backspace'] },
  { txt: '7', fn: (s) => { return s + '7' }, ids: ['7'] },
  { txt: '8', fn: (s) => { return s + '8' }, ids: ['8'] },
  { txt: '9', fn: (s) => { return s + '9' }, ids: ['9'] },
  { txt: '&#8730;x', fn: (s) => { return s + '^(0.5)' }, ids: ['square root'] },
  { txt: 'x<sup>n</sup>', fn: (s) => { return s + '^' }, ids: ['Dead'] },
  { txt: 'C', fn: (s) => { return '' }, ids: ['='] },
  { txt: '4', fn: (s) => { return s + '4' }, ids: ['4'] },
  { txt: '5', fn: (s) => { return s + '5' }, ids: ['5'] },
  { txt: '6', fn: (s) => { return s + '6' }, ids: ['6'] },
  { txt: 'x', fn: (s) => { return s + '*' }, ids: ['x'] },
  { txt: '÷', fn: (s) => { return s + '÷' }, ids: ['/'] },

  { txt: '%', fn: (s) => { return s + '%' }, ids: ['%'] },
  { txt: '1', fn: (s) => { return s + '1' }, ids: ['1'] },
  { txt: '2', fn: (s) => { return s + '2' }, ids: ['2'] },
  { txt: '3', fn: (s) => { return s + '3' }, ids: ['3'] },
  { txt: '-', fn: (s) => { return s + '-' }, ids: ['-'] },
  { txt: '+', fn: (s) => { return s + '+' }, ids: ['+'] },

  { txt: '(', fn: (s) => { return s + '(' }, ids: ['('] },
  { txt: ')', fn: (s) => { return s + ')' }, ids: [')'] },
  { txt: '0', fn: (s) => { return s + '0' }, ids: ['0'] },
  { txt: '.', fn: (s) => { return s + '.' }, ids: ['.'] },
  { txt: '!', fn: (s) => { return s + 'factorial(' }, ids: ['!'] },
];

export const PROGRAMMER_KEYBOARD: CalcBtn[] = [
  { txt: 'and', fn: (s) => { return s + 'bitAnd(' }, ids: ['and'] },
  { txt: 'D', fn: (s) => { return s + 'D' }, ids: ['D'] },
  { txt: 'E', fn: (s) => { return s + 'E' }, ids: ['E'] },
  { txt: 'F', fn: (s) => { return s + 'F' }, ids: ['F'] },
  { txt: 'not', fn: (s) => { return s + 'bitNot(' }, ids: ['bitNot'] },
  { txt: 'xor', fn: (s) => { return s + 'bitXor(' }, ids: ['xor'] },

  { txt: 'or', fn: (s) => { return s + 'bitOr(' }, ids: ['or'] },
  { txt: 'A', fn: (s) => { return s + 'A' }, ids: ['A'] },
  { txt: 'B', fn: (s) => { return s + 'B' }, ids: ['B'] },
  { txt: 'C', fn: (s) => { return s + 'C' }, ids: ['C'] },
  { txt: 'log2', fn: (s) => { return s + 'log2(' }, ids: ['log2'] },
  { txt: 'log10', fn: (s) => { return s + 'log10(' }, ids: ['log10'] },

  { txt: 'DEL', fn: (s) => { return s.substring(0, s.length - 1) }, ids: ['Delete', 'Backspace'] },
  { txt: '7', fn: (s) => { return s + '7' }, ids: ['7'] },
  { txt: '8', fn: (s) => { return s + '8' }, ids: ['8'] },
  { txt: '9', fn: (s) => { return s + '9' }, ids: ['9'] },
  { txt: '&#8730;x', fn: (s) => { return s + '^(0.5)' }, ids: ['square root'] },
  { txt: 'x<sup>n</sup>', fn: (s) => { return s + '^' }, ids: ['Dead'] },
  { txt: 'C', fn: (s) => { return '' }, ids: ['='] },
  { txt: '4', fn: (s) => { return s + '4' }, ids: ['4'] },
  { txt: '5', fn: (s) => { return s + '5' }, ids: ['5'] },
  { txt: '6', fn: (s) => { return s + '6' }, ids: ['6'] },
  { txt: 'x', fn: (s) => { return s + '*' }, ids: ['x'] },
  { txt: '÷', fn: (s) => { return s + '÷' }, ids: ['/'] },

  { txt: '%', fn: (s) => { return s + '%' }, ids: ['%'] },
  { txt: '1', fn: (s) => { return s + '1' }, ids: ['1'] },
  { txt: '2', fn: (s) => { return s + '2' }, ids: ['2'] },
  { txt: '3', fn: (s) => { return s + '3' }, ids: ['3'] },
  { txt: '-', fn: (s) => { return s + '-' }, ids: ['-'] },
  { txt: '+', fn: (s) => { return s + '+' }, ids: ['+'] },

  { txt: '(', fn: (s) => { return s + '(' }, ids: ['('] },
  { txt: ')', fn: (s) => { return s + ')' }, ids: [')'] },
  { txt: '0', fn: (s) => { return s + '0' }, ids: ['0'] },
  { txt: '.', fn: (s) => { return s + '.' }, ids: ['.'] },
];